/************ Add: Sequences ***************/

/* Autogenerated Sequences */

CREATE SEQUENCE public.beneficiarioNoExiste_idbeneficiarione_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.beneficiarioNoExiste_idbeneficiarione_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.modulos_idmodulo_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.modulos_idmodulo_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.moduloxseccionxsubseccion_idmodseccionsubseccion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.moduloxseccionxsubseccion_idmodseccionsubseccion_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.permisos_idpermiso_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.permisos_idpermiso_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.promocion_idpromocion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.promocion_idpromocion_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.promociones_idpromociones_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.promociones_idpromociones_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.promocionxrecaudo_idpromorecaudo_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.promocionxrecaudo_idpromorecaudo_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.recaudopromo_idrecpromocion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.recaudopromo_idrecpromocion_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.repoauditoria_idrepoauditoria_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.repoauditoria_idrepoauditoria_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.reportes_idreporte_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.reportes_idreporte_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.secciones_idseccion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.secciones_idseccion_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.subsecciones_idsubseccion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.subsecciones_idsubseccion_seq IS 'DbWrench Autogenerated Sequence.';


CREATE SEQUENCE auditar.auditoria_CODIGO_AU_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.AUDITORIA_CODIGO_AU_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.AUDITORIA_CODIGO_AU_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.barrio_idbarrio_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.benefactor_idbenefactor_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.benefactor_idbenefactor_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.beneficiario_idbeneficiario_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.beneficiario_idbeneficiario_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.ciudad_idciudad_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.cuenta_idcuenta_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.cuenta_idcuenta_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.cuentamovimiento_idmovimiento_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.cuentamovimiento_idmovimiento_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.departamentoestado_iddepartamento_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.estadisticas_idestadistica_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.estadisticas_idestadistica_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.indicativospaises_idindicativo_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.indicativospaises_idindicativo_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.informes_idinformes_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.informes_idinformes_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.informes_idinforme_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.informes_idinforme_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.informex_detalle_ididetalle_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.informex_detalle_ididetalle_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.informex_histo_idinformexhisto_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.informex_permiso_idpermiso_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.localidad_idlocalidad_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.moneda_idmoneda_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.moneda_idmoneda_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.notificacion_idnotificacion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.notificacion_idnotificacion_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.pais_idpais_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.parametrossms_idparametro_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.parametrossms_idparametro_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.pasarelapago_idpasarela_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.pasarelapago_idpasarela_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.pasarelas_configidpasarela_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.pasarelas_configidpasarela_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.perfil_idperfil_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.persona_idpersona_seq INCREMENT BY 1 START 1;

CREATE SEQUENCE public.recaudo_idrecaudo_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.recaudo_idrecaudo_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.transacciones_idtransaccion_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.transacciones_idtransaccion_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.transmensajetexto_idmensajetxt_seq INCREMENT BY 1 START 1;
COMMENT ON SEQUENCE public.transmensajetexto_idmensajetxt_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.usuario_idusuario_seq INCREMENT BY 1 START 1;



/************ Update: Tables ***************/

/******************** Add Table: auditar.auditoria ************************/

/* Build Table Structure */
CREATE TABLE auditar.auditoria
(
	"NombreTabla" VARCHAR NOT NULL,
	"Operacion" VARCHAR NOT NULL,
	"ValorAnterior" VARCHAR NULL,
	"NuevoValor" VARCHAR NULL,
	"UpdateDate" VARCHAR NULL,
	"USUARIO" VARCHAR NOT NULL,
	"CODIGO_AU" INTEGER DEFAULT nextval('auditar.auditoria_CODIGO_AU_seq'::regclass) NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE auditar.auditoria ADD CONSTRAINT "PK_CODIGO_AU"
	PRIMARY KEY ("CODIGO_AU");


/******************** Add Table: public.barrio ************************/

/* Build Table Structure */
CREATE TABLE public.barrio
(
	idbarrio INTEGER DEFAULT nextval('barrio_idbarrio_seq'::regclass) NOT NULL,
	idlocalidad INTEGER NOT NULL,
	codoficial VARCHAR NULL,
	nombre VARCHAR NOT NULL,
	observaciones TEXT NULL,
	latitud DOUBLE PRECISION NULL,
	longitud DOUBLE PRECISION NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.barrio ADD CONSTRAINT barrio_pkey
	PRIMARY KEY (idbarrio);


/******************** Add Table: public.benefactor ************************/

/* Build Table Structure */
CREATE TABLE public.benefactor
(
	idbenefactor BIGINT DEFAULT nextval('benefactor_idbenefactor_seq'::regclass) NOT NULL,
	idpersona BIGINT NOT NULL,
	updated_at TIMESTAMP NOT NULL,
	idusuario_updated INTEGER NOT NULL,
	username VARCHAR NOT NULL,
	constrasena TEXT NOT NULL,
	is_activo BOOL DEFAULT false NOT NULL,
	is_cambiarcontrasena BOOL DEFAULT false NOT NULL,
	cuenta BOOL NOT NULL,
	perfil TEXT NOT NULL,
	primerarecarga BOOL NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.benefactor ADD CONSTRAINT pkbenefactor
	PRIMARY KEY (idbenefactor);

/* Add Comments */
COMMENT ON COLUMN public.benefactor.idbenefactor IS 'Llave primaria';

COMMENT ON COLUMN public.benefactor.idpersona IS 'persona que es benefactor';

COMMENT ON COLUMN public.benefactor.updated_at IS 'Fecha de actualización de registro';

COMMENT ON COLUMN public.benefactor.idusuario_updated IS 'Llave primaria';

COMMENT ON COLUMN public.benefactor.username IS 'Nombre de usuario para acceso al sistema';

COMMENT ON COLUMN public.benefactor.constrasena IS 'Contraseña de acceso';

COMMENT ON COLUMN public.benefactor.is_activo IS 'Indica si la cuenta está o no activa';

COMMENT ON COLUMN public.benefactor.is_cambiarcontrasena IS 'Indica si se debe cambiar o no la contraseña';

COMMENT ON TABLE public.benefactor IS 'Registra los familiares o allegados que quieren realizar una transacción';


/******************** Add Table: public.beneficiario ************************/

/* Build Table Structure */
CREATE TABLE public.beneficiario
(
	idbeneficiario BIGINT DEFAULT nextval('beneficiario_idbeneficiario_seq'::regclass) NOT NULL,
	td VARCHAR NULL,
	pin VARCHAR NOT NULL,
	nombres_apellidos VARCHAR NOT NULL,
	idpersona BIGINT NULL,
	updated_at TIMESTAMP NOT NULL,
	idusuario_updated INTEGER NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.beneficiario ADD CONSTRAINT pkbeneficiario
	PRIMARY KEY (idbeneficiario);

/* Add Comments */
COMMENT ON COLUMN public.beneficiario.idbeneficiario IS 'Llave primaria';

COMMENT ON COLUMN public.beneficiario.td IS 'Número de identificación penitenciaria';

COMMENT ON COLUMN public.beneficiario.pin IS 'Número único de identificación ante el sistema telefónico de TN';

COMMENT ON COLUMN public.beneficiario.nombres_apellidos IS 'Nombres y apellidos del beneficiario en caso de que ID_PERSONA sea NULL';

COMMENT ON COLUMN public.beneficiario.idpersona IS 'Persona que es beneficiaria';

COMMENT ON COLUMN public.beneficiario.updated_at IS 'Fecha de actualización de registro';

COMMENT ON COLUMN public.beneficiario.idusuario_updated IS 'Usuario que actualiza el registro';

COMMENT ON TABLE public.beneficiario IS 'Registra los beneficiarios de las transacciones de recaudo';

/* Add Indexes */
CREATE UNIQUE INDEX beneficiario_pin_idx ON public.beneficiario USING btree (pin);


/******************** Add Table: "public"."beneficiarioNoExiste" ************************/

/* Build Table Structure */
CREATE TABLE public.beneficiarioNoExiste
(
	idbeneficiarione BIGINT DEFAULT nextval('public.beneficiarioNoExiste_idbeneficiarione_seq'::regclass) NOT NULL,
	td VARCHAR NOT NULL,
	pin VARCHAR NOT NULL,
	nombres_apellidos VARCHAR NOT NULL,
	idpersona BIGINT NOT NULL,
	update_at TIMESTAMP NOT NULL,
	idusuario_updated INTEGER NOT NULL,
	tariffgroupname INTEGER NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.beneficiarioNoExiste ADD CONSTRAINT pkbeneficiarioNoExiste
	PRIMARY KEY (idbeneficiarione);


/******************** Add Table: public.ciudad ************************/

/* Build Table Structure */
CREATE TABLE public.ciudad
(
	idciudad INTEGER DEFAULT nextval('ciudad_idciudad_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	codoficial VARCHAR NULL,
	latitud DOUBLE PRECISION NULL,
	longitud DOUBLE PRECISION NULL,
	iddepartamento INTEGER NOT NULL,
	codpostal VARCHAR NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.ciudad ADD CONSTRAINT ciudad_pkey
	PRIMARY KEY (idciudad);


/******************** Add Table: public.configuracion ************************/

/* Build Table Structure */
CREATE TABLE public.configuracion
(
	idparam INTEGER NOT NULL,
	valor TEXT NOT NULL,
	updated_at TIMESTAMP NOT NULL,
	idusuario_updated INTEGER NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.configuracion ADD CONSTRAINT configuracion_pkey
	PRIMARY KEY (idparam);

/* Add Comments */
COMMENT ON TABLE public.configuracion IS 'Registra los parámetros de configuración del sistema';


/******************** Add Table: public.cuenta ************************/

/* Build Table Structure */
CREATE TABLE public.cuenta
(
	idcuenta INTEGER DEFAULT nextval('cuenta_idcuenta_seq'::regclass) NOT NULL,
	idbenefactor BIGINT NOT NULL,
	val_entradas DOUBLE PRECISION DEFAULT 0 NOT NULL,
	val_salidas DOUBLE PRECISION DEFAULT 0 NOT NULL,
	val_saldo DOUBLE PRECISION NOT NULL,
	is_activa BOOL DEFAULT true NOT NULL,
	valcomision DOUBLE PRECISION NULL,
	idpasarela INTEGER NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.cuenta ADD CONSTRAINT pkcuenta
	PRIMARY KEY (idcuenta);

/* Add Comments */
COMMENT ON COLUMN public.cuenta.idcuenta IS 'Llave primaria';

COMMENT ON COLUMN public.cuenta.idbenefactor IS 'Benefactor dueño de la cuenta';

COMMENT ON COLUMN public.cuenta.val_entradas IS 'Valor acumulado en entradas';

COMMENT ON COLUMN public.cuenta.val_salidas IS 'Valor acumulado en salidas';

COMMENT ON COLUMN public.cuenta.val_saldo IS 'Saldo de la cuenta';

COMMENT ON COLUMN public.cuenta.is_activa IS 'Indica si la cuenta está o no activa';

/* Add Indexes */
CREATE UNIQUE INDEX cuenta_idbenefactor_idx ON public.cuenta USING btree (idbenefactor);


/******************** Add Table: public.cuentamovimiento ************************/

/* Build Table Structure */
CREATE TABLE public.cuentamovimiento
(
	idmovimiento BIGINT DEFAULT nextval('cuentamovimiento_idmovimiento_seq'::regclass) NOT NULL,
	valor DOUBLE PRECISION NOT NULL,
	tipo VARCHAR NOT NULL,
	observaciones VARCHAR NOT NULL,
	path_adjunto TEXT NULL,
	estado VARCHAR DEFAULT 'VALIDO' NOT NULL,
	observaciones_anulacion TEXT NULL,
	updated_at TIMESTAMP NOT NULL,
	idusuario_updated INTEGER NOT NULL,
	created_at TIMESTAMP NOT NULL,
	idusuario_created INTEGER NOT NULL,
	idcuenta INTEGER NOT NULL,
	idrecaudo BIGINT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.cuentamovimiento ADD CONSTRAINT pkcuentamovimiento
	PRIMARY KEY (idmovimiento);

/* Add Comments */
COMMENT ON COLUMN public.cuentamovimiento.idmovimiento IS 'Llave primaria';

COMMENT ON COLUMN public.cuentamovimiento.valor IS 'Valor del movimiento';

COMMENT ON COLUMN public.cuentamovimiento.tipo IS 'Tipo de movimiento';

COMMENT ON COLUMN public.cuentamovimiento.observaciones IS 'Observaciones';

COMMENT ON COLUMN public.cuentamovimiento.path_adjunto IS 'Path del archivo adjunto';

COMMENT ON COLUMN public.cuentamovimiento.estado IS 'Estado del movimiento';

COMMENT ON COLUMN public.cuentamovimiento.observaciones_anulacion IS 'OBservaciones de anulación';

COMMENT ON COLUMN public.cuentamovimiento.updated_at IS 'Fecha del movimiento';

COMMENT ON COLUMN public.cuentamovimiento.idusuario_updated IS 'Usuario que actualiza el registro';

COMMENT ON COLUMN public.cuentamovimiento.created_at IS 'Fecha de creación del registro';

COMMENT ON COLUMN public.cuentamovimiento.idusuario_created IS 'Usuario que crea el registro';

COMMENT ON COLUMN public.cuentamovimiento.idcuenta IS 'Cuenta a la que pertenece el movimiento';

COMMENT ON COLUMN public.cuentamovimiento.idrecaudo IS 'Recaudo relacionado con el movimiento';


/******************** Add Table: public.departamentoestado ************************/

/* Build Table Structure */
CREATE TABLE public.departamentoestado
(
	iddepartamento INTEGER DEFAULT nextval('departamentoestado_iddepartamento_seq'::regclass) NOT NULL,
	idpais INTEGER NOT NULL,
	codoficial VARCHAR NOT NULL,
	nombre VARCHAR NOT NULL,
	latitud DOUBLE PRECISION NULL,
	longitud DOUBLE PRECISION NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.departamentoestado ADD CONSTRAINT departamentoestado_pkey
	PRIMARY KEY (iddepartamento);

/* Add Comments */
COMMENT ON COLUMN public.departamentoestado.iddepartamento IS 'Llave primaria';

COMMENT ON COLUMN public.departamentoestado.idpais IS 'Pais al que pertenece';

COMMENT ON COLUMN public.departamentoestado.codoficial IS 'Cod ificial del departamento';

COMMENT ON COLUMN public.departamentoestado.nombre IS 'Nombre del departamento';

COMMENT ON COLUMN public.departamentoestado.latitud IS 'Latitud del departamento';

COMMENT ON COLUMN public.departamentoestado.longitud IS 'Longitud del departamento';

COMMENT ON TABLE public.departamentoestado IS 'Registra los departamentos o estados de los paises';


/******************** Add Table: public.estadisticas ************************/

/* Build Table Structure */
CREATE TABLE public.estadisticas
(
	idestadistica INTEGER DEFAULT nextval('estadisticas_idestadistica_seq'::regclass) NOT NULL,
	titulo VARCHAR NOT NULL,
	fecha_inicio TIMESTAMP NOT NULL,
	fecha_fin TIMESTAMP NOT NULL,
	idpersona BIGINT NOT NULL,
	is_finalisado BOOL NOT NULL,
	is_cancelado BOOL NOT NULL,
	log VARCHAR NOT NULL,
	codestadistica INTEGER NOT NULL,
	exel VARCHAR NOT NULL,
	pdf VARCHAR NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.estadisticas ADD CONSTRAINT pkestadisticas
	PRIMARY KEY (idestadistica);


/******************** Add Table: public.indicativospaises ************************/

/* Build Table Structure */
CREATE TABLE public.indicativospaises
(
	idindicativo INTEGER DEFAULT nextval('indicativospaises_idindicativo_seq'::regclass) NOT NULL,
	idpais INTEGER NOT NULL,
	iddepartamento INTEGER NOT NULL,
	idciudad INTEGER NOT NULL,
	codindicativo TEXT NOT NULL,
	codarea INTEGER NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.indicativospaises ADD CONSTRAINT pkindicativospaises
	PRIMARY KEY (idindicativo);

/* Add Comments */
COMMENT ON COLUMN public.indicativospaises.idindicativo IS 'llave primaria';

COMMENT ON COLUMN public.indicativospaises.idpais IS 'codigo del pais';

COMMENT ON COLUMN public.indicativospaises.iddepartamento IS 'codigo del departamento';

COMMENT ON COLUMN public.indicativospaises.idciudad IS 'codigo del la ciudad';

COMMENT ON COLUMN public.indicativospaises.codindicativo IS 'indicativo';


/******************** Add Table: public.informes ************************/

/* Build Table Structure */
CREATE TABLE public.informes
(
	idinforme INTEGER DEFAULT nextval('informes_idinforme_seq'::regclass) NOT NULL,
	idpersona BIGINT NOT NULL,
	titulo VARCHAR NOT NULL,
	estado VARCHAR NOT NULL,
	imagen VARCHAR NOT NULL,
	url VARCHAR NOT NULL,
	nombrevisual VARCHAR NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.informes ADD CONSTRAINT pkinformes
	PRIMARY KEY (idinforme);


/******************** Add Table: public.localidad ************************/

/* Build Table Structure */
CREATE TABLE public.localidad
(
	idlocalidad INTEGER DEFAULT nextval('localidad_idlocalidad_seq'::regclass) NOT NULL,
	idciudad INTEGER NOT NULL,
	codoficial VARCHAR NULL,
	nombre VARCHAR NOT NULL,
	observaciones TEXT NULL,
	latitud DOUBLE PRECISION NULL,
	longitud DOUBLE PRECISION NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.localidad ADD CONSTRAINT localidad_pkey
	PRIMARY KEY (idlocalidad);


/******************** Add Table: public.modulos ************************/

/* Build Table Structure */
CREATE TABLE public.modulos
(
	idmodulo INTEGER DEFAULT nextval('public.modulos_idmodulo_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	imagen VARCHAR NOT NULL,
	url VARCHAR NOT NULL,
	nombrevisual VARCHAR NOT NULL,
	estado BOOL NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.modulos ADD CONSTRAINT pkmodulos
	PRIMARY KEY (idmodulo);


/******************** Add Table: public.moduloxseccionxsubseccion ************************/

/* Build Table Structure */
CREATE TABLE public.moduloxseccionxsubseccion
(
	idmodulo INTEGER NOT NULL,
	idseccion INTEGER NOT NULL,
	idsubseccion INTEGER NOT NULL,
	idmodseccionsubseccion INTEGER DEFAULT nextval('public.moduloxseccionxsubseccion_idmodseccionsubseccion_seq'::regclass) NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.moduloxseccionxsubseccion ADD CONSTRAINT pkmoduloxseccionxsubseccion
	PRIMARY KEY (idmodseccionsubseccion);


/******************** Add Table: public.moneda ************************/

/* Build Table Structure */
CREATE TABLE public.moneda
(
	idmoneda INTEGER DEFAULT nextval('moneda_idmoneda_seq'::regclass) NOT NULL,
	idpais INTEGER NOT NULL,
	codeiso4217 VARCHAR NOT NULL,
	numiso4217 VARCHAR NOT NULL,
	simbolo VARCHAR NOT NULL,
	valortrm VARCHAR NOT NULL,
	descripcion VARCHAR NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.moneda ADD CONSTRAINT pkmoneda
	PRIMARY KEY (idmoneda);

/* Add Indexes */
CREATE INDEX fki_pais ON public.moneda USING btree (idpais);


/******************** Add Table: public.notificacion ************************/

/* Build Table Structure */
CREATE TABLE public.notificacion
(
	idnotificacion BIGINT DEFAULT nextval('notificacion_idnotificacion_seq'::regclass) NOT NULL,
	config_id INTEGER NOT NULL,
	tipo VARCHAR NOT NULL,
	email VARCHAR NULL,
	email_asunto VARCHAR NULL,
	email_contenido TEXT NULL,
	sms_content VARCHAR NULL,
	sms_numcel NUMERIC(15, 0) NULL,
	created_at TIMESTAMP NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.notificacion ADD CONSTRAINT pknotificacion
	PRIMARY KEY (idnotificacion);


/******************** Add Table: public.pais ************************/

/* Build Table Structure */
CREATE TABLE public.pais
(
	idpais INTEGER DEFAULT nextval('pais_idpais_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	cod_oficial_iso VARCHAR NULL,
	iso2 VARCHAR NOT NULL,
	iso3 VARCHAR NOT NULL,
	latitud DOUBLE PRECISION NULL,
	longitud DOUBLE PRECISION NULL,
	codpostal VARCHAR NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.pais ADD CONSTRAINT pais_pkey
	PRIMARY KEY (idpais);

/* Add Comments */
COMMENT ON COLUMN public.pais.idpais IS 'Llave primaria';

COMMENT ON COLUMN public.pais.nombre IS 'Nombre del país';

COMMENT ON COLUMN public.pais.cod_oficial_iso IS 'Cód oficial ISO';

COMMENT ON COLUMN public.pais.iso2 IS 'ISO 2';

COMMENT ON COLUMN public.pais.iso3 IS 'ISO 3';

COMMENT ON COLUMN public.pais.latitud IS 'Latitud';

COMMENT ON COLUMN public.pais.longitud IS 'Longitud';

COMMENT ON TABLE public.pais IS 'Se registran los paises';


/******************** Add Table: public.parametrossms ************************/

/* Build Table Structure */
CREATE TABLE public.parametrossms
(
	idparametro BIGINT DEFAULT nextval('parametrossms_idparametro_seq'::regclass) NOT NULL,
	host VARCHAR NOT NULL,
	puerto VARCHAR NOT NULL,
	protocolo VARCHAR NOT NULL,
	nombre VARCHAR NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.parametrossms ADD CONSTRAINT pkparametrossms
	PRIMARY KEY (idparametro);


/******************** Add Table: public.pasarelapago ************************/

/* Build Table Structure */
CREATE TABLE public.pasarelapago
(
	idpasarela INTEGER DEFAULT nextval('pasarelapago_idpasarela_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	config_xml TEXT NOT NULL,
	updated_at TIMESTAMP NOT NULL,
	idusuario_updated INTEGER NOT NULL,
	comision DOUBLE PRECISION NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.pasarelapago ADD CONSTRAINT pkpasarelapago
	PRIMARY KEY (idpasarela);

/* Add Comments */
COMMENT ON COLUMN public.pasarelapago.idpasarela IS 'Llave primaria';

COMMENT ON COLUMN public.pasarelapago.nombre IS 'Nombre de la pasarela de pagos';

COMMENT ON COLUMN public.pasarelapago.config_xml IS 'Configuración de la pasarela';

COMMENT ON COLUMN public.pasarelapago.updated_at IS 'Fecha de actualización de registro';

COMMENT ON COLUMN public.pasarelapago.idusuario_updated IS 'Usuarioque actualiza el registro';


/******************** Add Table: public.pasarelas ************************/

/* Build Table Structure */
CREATE TABLE public.pasarelas
(
	configidpasarela BIGINT DEFAULT nextval('pasarelas_configidpasarela_seq'::regclass) NOT NULL,
	config_id INTEGER NOT NULL,
	tipo VARCHAR NOT NULL,
	nombre VARCHAR NOT NULL,
	puerto VARCHAR NOT NULL,
	host VARCHAR NOT NULL,
	protocolo VARCHAR NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.pasarelas ADD CONSTRAINT pkpasarelas
	PRIMARY KEY (configidpasarela);


/******************** Add Table: public.perfil ************************/

/* Build Table Structure */
CREATE TABLE public.perfil
(
	idperfil INTEGER DEFAULT nextval('perfil_idperfil_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	observaciones TEXT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.perfil ADD CONSTRAINT perfil_pkey
	PRIMARY KEY (idperfil);

/* Add Comments */
COMMENT ON TABLE public.perfil IS 'Registra los perfiles del sistema';


/******************** Add Table: public.perfil_funcionalidad ************************/

/* Build Table Structure */
CREATE TABLE public.perfil_funcionalidad
(
	idpf VARCHAR NOT NULL,
	funcionalidad_id INTEGER NOT NULL,
	idperfil INTEGER NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.perfil_funcionalidad ADD CONSTRAINT perfil_funcionalidad_pkey
	PRIMARY KEY (idpf);

/* Add Comments */
COMMENT ON COLUMN public.perfil_funcionalidad.idpf IS 'Llave primaria';

COMMENT ON COLUMN public.perfil_funcionalidad.funcionalidad_id IS 'Id. la funcionalidad que pertenece al perfil';

COMMENT ON COLUMN public.perfil_funcionalidad.idperfil IS 'Perfil al que pertenece la funcionalidad';

COMMENT ON TABLE public.perfil_funcionalidad IS 'Registra las funcionalidades de un perfil';


/******************** Add Table: public.perfil_has_usuario ************************/

/* Build Table Structure */
CREATE TABLE public.perfil_has_usuario
(
	idpu VARCHAR NOT NULL,
	idperfil INTEGER NOT NULL,
	idusuario INTEGER NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.perfil_has_usuario ADD CONSTRAINT perfil_has_usuario_pkey
	PRIMARY KEY (idpu);

/* Add Comments */
COMMENT ON COLUMN public.perfil_has_usuario.idpu IS 'Llave primaria';

COMMENT ON COLUMN public.perfil_has_usuario.idperfil IS 'Perfil que se relaciona con el usuario';

COMMENT ON COLUMN public.perfil_has_usuario.idusuario IS 'Usuario que tiene el perfil';

COMMENT ON TABLE public.perfil_has_usuario IS 'Registro los perfiles a los que pertenece un usuario';


/******************** Add Table: public.permisos ************************/

/* Build Table Structure */
CREATE TABLE public.permisos
(
	idpermiso INTEGER DEFAULT nextval('public.permisos_idpermiso_seq'::regclass) NOT NULL,
	idusuario INTEGER NOT NULL,
	idperfil INTEGER NOT NULL,
	idmodulo INTEGER NOT NULL,
	idseccion INTEGER NOT NULL,
	idsubsecccion INTEGER NOT NULL,
	consulta BOOL NOT NULL,
	ingreso BOOL NOT NULL,
	eliminacion BOOL NOT NULL,
	edicion BOOL NOT NULL,
	buscar BOOL NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.permisos ADD CONSTRAINT pkpermisos
	PRIMARY KEY (idpermiso);


/******************** Add Table: public.persona ************************/

/* Build Table Structure */
CREATE TABLE public.persona
(
	idpersona BIGINT DEFAULT nextval('persona_idpersona_seq'::regclass) NOT NULL,
	nombres VARCHAR NOT NULL,
	apellidos VARCHAR NOT NULL,
	tipodocumento VARCHAR NOT NULL,
	numdocumento NUMERIC(20, 0) NOT NULL,
	num_telefono NUMERIC(15, 0) NULL,
	email VARCHAR NULL,
	direccion TEXT NULL,
	idusuario_updated INTEGER NULL,
	updated_at TIMESTAMP NOT NULL,
	idusuario_created INTEGER NULL,
	created_at TIMESTAMP NOT NULL,
	num_telefono2 NUMERIC(10, 0) NULL,
	idciudad INTEGER NULL,
	imagen VARCHAR NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.persona ADD CONSTRAINT pkpersona
	PRIMARY KEY (idpersona);

/* Add Comments */
COMMENT ON COLUMN public.persona.idpersona IS 'Llave primaria';

COMMENT ON COLUMN public.persona.nombres IS 'Primer y segundo nombre';

COMMENT ON COLUMN public.persona.apellidos IS 'Primer y segundo apellido';

COMMENT ON COLUMN public.persona.tipodocumento IS 'Tipo de documento de identidad';

COMMENT ON COLUMN public.persona.numdocumento IS 'Número de documento de identidad';

COMMENT ON COLUMN public.persona.num_telefono IS 'Número de teléfono';

COMMENT ON COLUMN public.persona.email IS 'Correo electrónico';

COMMENT ON COLUMN public.persona.direccion IS 'Dirección de residencia';

COMMENT ON COLUMN public.persona.idusuario_updated IS 'Usuario que actualiza el registro';

COMMENT ON COLUMN public.persona.updated_at IS 'Fecha de actualización';

COMMENT ON COLUMN public.persona.idusuario_created IS 'Usuario que crea el registro';

COMMENT ON COLUMN public.persona.created_at IS 'Fecha de creación de registro';

COMMENT ON COLUMN public.persona.num_telefono2 IS 'Teléfono 2';

COMMENT ON TABLE public.persona IS 'Registra todas las personas que tienen que ver con el sistema de una u otra forma.';

/* Add Unique Constraints */
ALTER TABLE public.persona
	ADD CONSTRAINT persona_numdocumento_key UNIQUE (numdocumento);

/* Add Indexes */
CREATE UNIQUE INDEX persona_numdocumento_uniq ON public.persona USING btree (numdocumento);


/******************** Add Table: public.promocion ************************/

/* Build Table Structure */
CREATE TABLE public.promocion
(
	idpromocion INTEGER DEFAULT nextval('public.promocion_idpromocion_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	estado BOOL NOT NULL,
	observacion TEXT NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.promocion ADD CONSTRAINT pkpromocion
	PRIMARY KEY (idpromocion);


/******************** Add Table: public.promociones ************************/

/* Build Table Structure */
CREATE TABLE public.promociones
(
	idpromociones INTEGER DEFAULT nextval('public.promociones_idpromociones_seq'::regclass) NOT NULL,
	idpromocion INTEGER NOT NULL,
	tipo_valor VARCHAR NOT NULL,
	valor_promocion VARCHAR NOT NULL,
	fecha_inicial DATE NOT NULL,
	fecha_final DATE NOT NULL,
	estado BOOL NOT NULL,
	cero BOOL NOT NULL,
	uno BOOL NOT NULL,
	dos BOOL NOT NULL,
	tres BOOL NOT NULL,
	cuatro BOOL NOT NULL,
	cinco BOOL NOT NULL,
	seis BOOL NOT NULL,
	siete BOOL NOT NULL,
	ocho BOOL NOT NULL,
	nueve BOOL NOT NULL,
	tipo_aplicadesde VARCHAR NOT NULL,
	aplicadesde VARCHAR NOT NULL,
	valoraplica VARCHAR NOT NULL,
	observacion TEXT NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.promociones ADD CONSTRAINT pkpromociones
	PRIMARY KEY (idpromociones);


/******************** Add Table: public.promocionxrecaudo ************************/

/* Build Table Structure */
CREATE TABLE public.promocionxrecaudo
(
	idpromorecaudo INTEGER DEFAULT nextval('public.promocionxrecaudo_idpromorecaudo_seq'::regclass) NOT NULL,
	idrecaudo INTEGER NOT NULL,
	idpromocion INTEGER NOT NULL,
	idbenefactor INTEGER NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.promocionxrecaudo ADD CONSTRAINT pkpromocionxrecaudo
	PRIMARY KEY (idpromorecaudo);


/******************** Add Table: public.promorecaudobenefactor ************************/

/* Build Table Structure */
CREATE TABLE public.promorecaudobenefactor
(
);


/******************** Add Table: public.recaudo ************************/

/* Build Table Structure */
CREATE TABLE public.recaudo
(
	idrecaudo BIGINT DEFAULT nextval('recaudo_idrecaudo_seq'::regclass) NOT NULL,
	idbenefactor BIGINT NOT NULL,
	idbeneficiario BIGINT NOT NULL,
	valor DOUBLE PRECISION NOT NULL,
	estado VARCHAR NOT NULL,
	log TEXT NULL,
	created_at TIMESTAMP NOT NULL,
	check_telefonia_at TIMESTAMP NULL,
	establecimiento VARCHAR NOT NULL,
	cod_pago VARCHAR NOT NULL,
	token_wtnpagos TEXT NULL,
	idpasarela INTEGER NOT NULL,
	telefonosms TEXT NULL,
	ciudad TEXT NULL,
	observacion VARCHAR NULL,
	observacion_adicional VARCHAR NULL,
	pasarela_dia TEXT NOT NULL,
	valorcomision DOUBLE PRECISION NOT NULL,
	valorpromocion INTEGER NOT NULL,
	numtransaccion VARCHAR NOT NULL,
	promo VARCHAR NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.recaudo ADD CONSTRAINT pkrecaudo
	PRIMARY KEY (idrecaudo);

/* Add Comments */
COMMENT ON COLUMN public.recaudo.idrecaudo IS 'Llave primaria';

COMMENT ON COLUMN public.recaudo.idbenefactor IS 'Quien realiza la consignación';

COMMENT ON COLUMN public.recaudo.idbeneficiario IS 'Quien recibe la consignación';

COMMENT ON COLUMN public.recaudo.valor IS 'Valor del recaudo';

COMMENT ON COLUMN public.recaudo.estado IS 'Estado del recaudo';

COMMENT ON COLUMN public.recaudo.log IS 'Log de la transacción';

COMMENT ON COLUMN public.recaudo.created_at IS 'Fecha de creación de registro';

COMMENT ON COLUMN public.recaudo.check_telefonia_at IS 'Fecha en la que se confirma la recarga en la plataforma de telefonía';

COMMENT ON COLUMN public.recaudo.establecimiento IS 'Establecimiento en el que está el beneficiario que recibe el recaudo';

COMMENT ON COLUMN public.recaudo.cod_pago IS 'Códigop de pago indicado por la pasarela';

COMMENT ON COLUMN public.recaudo.token_wtnpagos IS 'Información del pago en formato XML';

COMMENT ON COLUMN public.recaudo.idpasarela IS 'Pasarela de pagos utilizadas para la transacción';

COMMENT ON COLUMN public.recaudo.telefonosms IS 'telefono para envio de mensajes de confirmacion del pago';

COMMENT ON TABLE public.recaudo IS 'Registra las transacciones de recaudo';


/******************** Add Table: public.recaudopromo ************************/

/* Build Table Structure */
CREATE TABLE public.recaudopromo
(
	idrecpromocion INTEGER DEFAULT nextval('public.recaudopromo_idrecpromocion_seq'::regclass) NOT NULL,
	idpromociones INTEGER NOT NULL,
	idrecaudo BIGINT NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.recaudopromo ADD CONSTRAINT pkrecaudopromo
	PRIMARY KEY (idrecpromocion);


/******************** Add Table: public.repoauditoria ************************/

/* Build Table Structure */
CREATE TABLE public.repoauditoria
(
	idrepoauditoria INTEGER DEFAULT nextval('public.repoauditoria_idrepoauditoria_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	imagen VARCHAR NOT NULL,
	url VARCHAR NOT NULL,
	nombrevisual VARCHAR NOT NULL,
	estado BOOL NOT NULL,
	created_at TIMESTAMP NOT NULL,
	idusuario INTEGER NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.repoauditoria ADD CONSTRAINT pkrepoauditoria
	PRIMARY KEY (idrepoauditoria);


/******************** Add Table: public.reportes ************************/

/* Build Table Structure */
CREATE TABLE public.reportes
(
	idreporte INTEGER DEFAULT nextval('public.reportes_idreporte_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	imagen VARCHAR NOT NULL,
	url VARCHAR NOT NULL,
	nombrevisual VARCHAR NOT NULL,
	estado BOOL NOT NULL,
	created_at TIMESTAMP NOT NULL,
	idusuario INTEGER NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.reportes ADD CONSTRAINT pkreportes
	PRIMARY KEY (idreporte);


/******************** Add Table: public.secciones ************************/

/* Build Table Structure */
CREATE TABLE public.secciones
(
	idseccion INTEGER DEFAULT nextval('public.secciones_idseccion_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	nombrevisual VARCHAR NOT NULL,
	estado BOOL NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.secciones ADD CONSTRAINT pksecciones
	PRIMARY KEY (idseccion);


/******************** Add Table: public.subsecciones ************************/

/* Build Table Structure */
CREATE TABLE public.subsecciones
(
	idsubseccion INTEGER DEFAULT nextval('public.subsecciones_idsubseccion_seq'::regclass) NOT NULL,
	nombre VARCHAR NOT NULL,
	imagen VARCHAR NOT NULL,
	url VARCHAR NOT NULL,
	nombrevisual VARCHAR NOT NULL,
	estado BOOL NOT NULL
);

/* Add Primary Key */
ALTER TABLE public.subsecciones ADD CONSTRAINT pksubsecciones
	PRIMARY KEY (idsubseccion);


/******************** Add Table: public.transacciones ************************/

/* Build Table Structure */
CREATE TABLE public.transacciones
(
	idtransaccion BIGINT DEFAULT nextval('transacciones_idtransaccion_seq'::regclass) NOT NULL,
	codtransaccion TEXT NULL,
	formapago TEXT NULL,
	franquicia TEXT NULL,
	descripcion TEXT NULL,
	referencia1 TEXT NULL,
	fechapago TEXT NULL,
	numerorecibo TEXT NULL,
	codigo BIGINT NULL,
	mensajeerror TEXT NULL,
	idrecaudo BIGINT NOT NULL,
	codigoint TEXT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.transacciones ADD CONSTRAINT pktransacciones
	PRIMARY KEY (idtransaccion);

/* Add Comments */
COMMENT ON COLUMN public.transacciones.idtransaccion IS 'llave primaria que indica una transaccion exitosa';

COMMENT ON COLUMN public.transacciones.codtransaccion IS 'recibe el codigo de la transaccion';

COMMENT ON COLUMN public.transacciones.idrecaudo IS 'llave foranea proveniente del recaudo';


/******************** Add Table: public.transmensajetexto ************************/

/* Build Table Structure */
CREATE TABLE public.transmensajetexto
(
	idmensajetxt INTEGER DEFAULT nextval('transmensajetexto_idmensajetxt_seq'::regclass) NOT NULL,
	status TEXT NOT NULL,
	cantidadmensajes TEXT NOT NULL,
	valor TEXT NOT NULL,
	cantidad_caracteres TEXT NOT NULL,
	mensaje TEXT NOT NULL,
	idconfirmacion TEXT NOT NULL,
	transaccionid INTEGER NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.transmensajetexto ADD CONSTRAINT pktransmensajetexto
	PRIMARY KEY (idmensajetxt);


/******************** Add Table: public.usuario ************************/

/* Build Table Structure */
CREATE TABLE public.usuario
(
	idusuario INTEGER DEFAULT nextval('usuario_idusuario_seq'::regclass) NOT NULL,
	idpersona BIGINT NOT NULL,
	username VARCHAR NOT NULL,
	contrasena TEXT NOT NULL,
	updated_at TIMESTAMP NOT NULL,
	is_activo BOOL NOT NULL,
	is_cambiarcontrasena BOOL NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.usuario ADD CONSTRAINT usuario_pkey
	PRIMARY KEY (idusuario);

/* Add Comments */
COMMENT ON COLUMN public.usuario.idusuario IS 'Llave primaria';

COMMENT ON COLUMN public.usuario.idpersona IS 'Persona que es usuario';

COMMENT ON COLUMN public.usuario.username IS 'Login';

COMMENT ON COLUMN public.usuario.contrasena IS 'Contraseña de acceso';

COMMENT ON COLUMN public.usuario.updated_at IS 'Fecha de actualización';

COMMENT ON COLUMN public.usuario.is_activo IS 'Indica si esta o no activo el usuario';

COMMENT ON TABLE public.usuario IS 'Registra los usuarios que tienen acceso al sistema';

/* Add Unique Constraints */
ALTER TABLE public.usuario
	ADD CONSTRAINT usuario_idpersona_key UNIQUE (idpersona);

ALTER TABLE public.usuario
	ADD CONSTRAINT usuario_username_key UNIQUE (username);

/* Add Indexes */
CREATE UNIQUE INDEX usuario_idpersona_idx ON public.usuario USING btree (idpersona);

CREATE UNIQUE INDEX usuario_username_uniq ON public.usuario USING btree (username);




/************ Update: Views ***************/

/* Add View: vista_recargas_tnpagos */
CREATE VIEW public.vista_recargas_tnpagos AS
SELECT
  recaudo.idrecaudo AS idvista,
  persona.nombres,
  persona.apellidos,
  persona.tipodocumento AS tipo_documento,
  persona.numdocumento AS numero_documento,
  persona.num_telefono,
  persona.email,
  persona.direccion,
  ciudad.nombre AS ciudad_familiar,
  departamentoestado.nombre AS departamento_familiar,
  pais.nombre AS pais_familiar,
  beneficiario.td AS tipodocumento_ppl,
  beneficiario.pin AS numero_documento_ppl,
  beneficiario.nombres_apellidos AS nombre_ppl,
  recaudo.idrecaudo,
  recaudo.valor,
  recaudo.estado,
  recaudo.log,
  recaudo.created_at,
  recaudo.check_telefonia_at,
  recaudo.establecimiento,
  recaudo.cod_pago,
  recaudo.telefonosms,
  recaudo.observacion,
  recaudo.observacion_adicional,
  recaudo.ciudad AS ciudad_ppl,
  pasarelapago.nombre AS nombre_pasarela,
  transacciones.codtransaccion,
  transacciones.formapago,
  transacciones.franquicia,
  transacciones.descripcion,
  transacciones.referencia1,
  transacciones.fechapago,
  transacciones.numerorecibo,
  transacciones.codigo,
  transacciones.mensajeerror
FROM recaudo
  JOIN benefactor ON recaudo.idbenefactor = benefactor.idbenefactor
  JOIN beneficiario ON recaudo.idbeneficiario = beneficiario.idbeneficiario
  JOIN persona ON benefactor.idpersona = persona.idpersona
  JOIN ciudad ON persona.idciudad = ciudad.idciudad
  JOIN departamentoestado ON ciudad.iddepartamento = departamentoestado.iddepartamento
  JOIN pais ON departamentoestado.idpais = pais.idpais
  JOIN pasarelapago ON recaudo.idpasarela = pasarelapago.idpasarela
  JOIN transacciones ON recaudo.idrecaudo = transacciones.idrecaudo
WHERE recaudo.idpasarela = 1;

/* Add View: vista_recargas_webservices */
CREATE VIEW public.vista_recargas_webservices AS
SELECT
  recaudo.idrecaudo AS idvista,
  persona.nombres,
  persona.apellidos,
  persona.tipodocumento AS tipo_documento,
  persona.numdocumento AS numero_documento,
  persona.num_telefono,
  persona.email,
  persona.direccion,
  ciudad.nombre AS ciudad_familiar,
  departamentoestado.nombre AS departamento_familiar,
  pais.nombre AS pais_familiar,
  beneficiario.td AS tipodocumento_ppl,
  beneficiario.pin AS numero_documento_ppl,
  beneficiario.nombres_apellidos AS nombre_ppl,
  recaudo.idrecaudo,
  recaudo.valor,
  recaudo.estado,
  recaudo.log,
  recaudo.created_at,
  recaudo.check_telefonia_at,
  recaudo.establecimiento,
  recaudo.cod_pago,
  recaudo.telefonosms,
  recaudo.observacion,
  recaudo.observacion_adicional,
  recaudo.ciudad AS ciudad_ppl,
  pasarelapago.nombre AS nombre_pasarela,
  transacciones.codtransaccion,
  transacciones.formapago,
  transacciones.franquicia,
  transacciones.descripcion,
  transacciones.referencia1,
  transacciones.fechapago,
  transacciones.numerorecibo,
  transacciones.codigo,
  transacciones.mensajeerror
FROM recaudo
  JOIN benefactor ON recaudo.idbenefactor = benefactor.idbenefactor
  JOIN beneficiario ON recaudo.idbeneficiario = beneficiario.idbeneficiario
  JOIN persona ON benefactor.idpersona = persona.idpersona
  JOIN ciudad ON persona.idciudad = ciudad.idciudad
  JOIN departamentoestado ON ciudad.iddepartamento = departamentoestado.iddepartamento
  JOIN pais ON departamentoestado.idpais = pais.idpais
  JOIN pasarelapago ON recaudo.idpasarela = pasarelapago.idpasarela
  JOIN transacciones ON recaudo.idrecaudo = transacciones.idrecaudo
WHERE recaudo.idpasarela <> 1;



/************ Update: Procedures ***************/

/* Procedure: crea_primary_perfil_funcionalidad() */
CREATE OR REPLACE FUNCTION public.crea_primary_perfil_funcionalidad() 
  RETURNS trigger AS 
$$
BEGIN
	NEW.idpf:=NEW.idperfil||'_'||NEW.funcionalidad_id;--Concatenado
	RETURN NEW;
END;
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: crea_primary_perfil_has_usuario() */
CREATE OR REPLACE FUNCTION public.crea_primary_perfil_has_usuario() 
  RETURNS trigger AS 
$$
BEGIN
	NEW.idpu:=NEW.idperfil||'_'||NEW.idusuario;--Concatenado
	RETURN NEW;
END;
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_barrio() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_barrio() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_benefactor() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_benefactor() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_beneficiario() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_beneficiario() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_ciudad() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_ciudad() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_configuracion() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_configuracion() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_cuenta() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_cuenta() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_cuentamovimiento() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_cuentamovimiento() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_departamentoestado() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_departamentoestado() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_indicativospaises() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_indicativospaises() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_informex_histo() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_informex_histo() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_informex_permiso() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_informex_permiso() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_localidad() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_localidad() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_moneda() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_moneda() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_notificacion() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_notificacion() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_pais() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_pais() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_parametrossms() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_parametrossms() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_pasarelapago() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_pasarelapago() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_pasarelas() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_pasarelas() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_perfil() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_perfil() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_perfil_funcionalidad() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_perfil_funcionalidad() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_perfil_has_usuario() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_perfil_has_usuario() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_persona() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_persona() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_recaudo() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_recaudo() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_transacciones() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_transacciones() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_transmensajetexto() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_transmensajetexto() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;

/* Procedure: fn_log_audit_usuario() */
CREATE OR REPLACE FUNCTION public.fn_log_audit_usuario() 
  RETURNS trigger AS 
$$
begin
IF(TG_OP = 'DELETE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'D', row_to_json(OLD.*),NULL,NOW(),USER);
RETURN OLD;
ELSEIF (TG_OP = 'UPDATE') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'U',row_to_json(OLD.*),row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
ELSEIF(TG_OP = 'INSERT') THEN
INSERT INTO auditar.AUDITORIA ("NombreTabla","Operacion","ValorAnterior","NuevoValor","UpdateDate","USUARIO")
VALUES (TG_TABLE_NAME,'I',NULL,row_to_json(NEW.*),NOW(),USER);
RETURN NEW;
END IF;
RETURN NULL;
end
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;



/************ Update: Triggers ***************/

/* Add Triggers */
CREATE TRIGGER tbl_barrio_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.barrio
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_barrio();

/* Add Triggers */
CREATE TRIGGER tbl_ciudad_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.ciudad
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_ciudad();

/* Add Triggers */
CREATE TRIGGER tbl_localidad_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.localidad
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_localidad();

/* Add Triggers */
CREATE TRIGGER tbl_notificacion_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.notificacion
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_notificacion();

/* Add Triggers */
CREATE TRIGGER tbl_parametrossms_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.parametrossms
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_parametrossms();

/* Add Triggers */
CREATE TRIGGER tbl_pasarelas_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.pasarelas
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_pasarelas();

/* Add Triggers */
CREATE TRIGGER tbl_transmensajetexto_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.transmensajetexto
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_transmensajetexto();

/* Add Triggers */
CREATE TRIGGER tbl_configuracion_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.configuracion
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_configuracion();

/* Add Triggers */
CREATE TRIGGER tbl_moneda_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.moneda
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_moneda();

/* Add Triggers */
CREATE TRIGGER tbl_perfil_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.perfil
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_perfil();

/* Add Triggers */
CREATE TRIGGER tbl_transacciones_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.transacciones
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_transacciones();

/* Add Triggers */
CREATE TRIGGER tbl_perfilfuncionalidad_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.perfil_funcionalidad
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_perfil_funcionalidad();

/* Add Triggers */
CREATE TRIGGER tbl_perfilhasusuario_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.perfil_has_usuario
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_perfil_has_usuario();

/* Add Triggers */
CREATE TRIGGER tbl_indicativospaises_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.indicativospaises
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_indicativospaises();

/* Add Triggers */
CREATE TRIGGER tbl_pasarelapago_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.pasarelapago
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_pasarelapago();

/* Add Triggers */
CREATE TRIGGER tbl_cuenta_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.cuenta
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_cuenta();

/* Add Triggers */
CREATE TRIGGER tbl_departamentoestado_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.departamentoestado
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_departamentoestado();

/* Add Triggers */
CREATE TRIGGER tbl_pais_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.pais
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_pais();

/* Add Triggers */
CREATE TRIGGER tbl_benefactor_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.benefactor
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_benefactor();

/* Add Triggers */
CREATE TRIGGER tbl_beneficiario_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.beneficiario
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_beneficiario();

/* Add Triggers */
CREATE TRIGGER tbl_usuario_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.usuario
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_usuario();

/* Add Triggers */
CREATE TRIGGER tbl_cuentamovimiento_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.cuentamovimiento
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_cuentamovimiento();

/* Add Triggers */
CREATE TRIGGER tbl_recaudo_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.recaudo
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_recaudo();

/* Add Triggers */
CREATE TRIGGER tbl_persona_tb_auditoria
	AFTER DELETE OR INSERT OR UPDATE ON public.persona
	FOR EACH ROW EXECUTE PROCEDURE public.fn_log_audit_persona();


/************ Add Foreign Keys ***************/

/* Add Foreign Key: fk_barrio_localidad */
ALTER TABLE public.barrio ADD CONSTRAINT fk_barrio_localidad
	FOREIGN KEY (idlocalidad) REFERENCES public.localidad (idlocalidad)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_benefactor_persona */
ALTER TABLE public.benefactor ADD CONSTRAINT fk_benefactor_persona
	FOREIGN KEY (idpersona) REFERENCES public.persona (idpersona)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_benefactor_usuario */
ALTER TABLE public.benefactor ADD CONSTRAINT fk_benefactor_usuario
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_beneficiario_persona */
ALTER TABLE public.beneficiario ADD CONSTRAINT fk_beneficiario_persona
	FOREIGN KEY (idpersona) REFERENCES public.persona (idpersona)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_beneficiario_usuario */
ALTER TABLE public.beneficiario ADD CONSTRAINT fk_beneficiario_usuario
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_beneficiarioNoExiste_ciudad */
ALTER TABLE public.beneficiarioNoExiste ADD CONSTRAINT fk_beneficiarioNoExiste_ciudad
	FOREIGN KEY (tariffgroupname) REFERENCES public.ciudad (idciudad)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_beneficiario_NoExiste_persona */
ALTER TABLE public.beneficiarioNoExiste ADD CONSTRAINT fk_beneficiario_NoExiste_persona
	FOREIGN KEY (idpersona) REFERENCES public.persona (idpersona)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_beneficiario_NoExiste_usuario */
ALTER TABLE public.beneficiarioNoExiste ADD CONSTRAINT fk_beneficiario_NoExiste_usuario
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_ciudad_departamentoestado */
ALTER TABLE public.ciudad ADD CONSTRAINT fk_ciudad_departamentoestado
	FOREIGN KEY (iddepartamento) REFERENCES public.departamentoestado (iddepartamento)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_configuracion_usuario */
ALTER TABLE public.configuracion ADD CONSTRAINT fk_configuracion_usuario
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_cuenta_benefactor */
ALTER TABLE public.cuenta ADD CONSTRAINT fk_cuenta_benefactor
	FOREIGN KEY (idbenefactor) REFERENCES public.benefactor (idbenefactor)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_cuenta_pasarelapago */
ALTER TABLE public.cuenta ADD CONSTRAINT fk_cuenta_pasarelapago
	FOREIGN KEY (idpasarela) REFERENCES public.pasarelapago (idpasarela)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_cuentamovimiento_cuenta */
ALTER TABLE public.cuentamovimiento ADD CONSTRAINT fk_cuentamovimiento_cuenta
	FOREIGN KEY (idcuenta) REFERENCES public.cuenta (idcuenta)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_cuentamovimiento_recaudo */
ALTER TABLE public.cuentamovimiento ADD CONSTRAINT fk_cuentamovimiento_recaudo
	FOREIGN KEY (idrecaudo) REFERENCES public.recaudo (idrecaudo)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_cuentamovimiento_usuario_cree */
ALTER TABLE public.cuentamovimiento ADD CONSTRAINT fk_cuentamovimiento_usuario_cree
	FOREIGN KEY (idusuario_created) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_cuentamovimiento_usuario_updated */
ALTER TABLE public.cuentamovimiento ADD CONSTRAINT fk_cuentamovimiento_usuario_updated
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_departamentoestado_pais */
ALTER TABLE public.departamentoestado ADD CONSTRAINT fk_departamentoestado_pais
	FOREIGN KEY (idpais) REFERENCES public.pais (idpais)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_estadisticas_persona */
ALTER TABLE public.estadisticas ADD CONSTRAINT fk_estadisticas_persona
	FOREIGN KEY (idpersona) REFERENCES public.persona (idpersona)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_indicativosciudad_ciudad */
ALTER TABLE public.indicativospaises ADD CONSTRAINT fk_indicativosciudad_ciudad
	FOREIGN KEY (idciudad) REFERENCES public.ciudad (idciudad)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_indicativospaises_departamentoestado */
ALTER TABLE public.indicativospaises ADD CONSTRAINT fk_indicativospaises_departamentoestado
	FOREIGN KEY (iddepartamento) REFERENCES public.departamentoestado (iddepartamento)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_indicativospaises_pais */
ALTER TABLE public.indicativospaises ADD CONSTRAINT fk_indicativospaises_pais
	FOREIGN KEY (idpais) REFERENCES public.pais (idpais)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_informes_persona */
ALTER TABLE public.informes ADD CONSTRAINT fk_informes_persona
	FOREIGN KEY (idpersona) REFERENCES public.persona (idpersona)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_localidad_ciudad */
ALTER TABLE public.localidad ADD CONSTRAINT fk_localidad_ciudad
	FOREIGN KEY (idciudad) REFERENCES public.ciudad (idciudad)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_moduloxseccionxsubseccion_modulos */
ALTER TABLE public.moduloxseccionxsubseccion ADD CONSTRAINT fk_moduloxseccionxsubseccion_modulos
	FOREIGN KEY (idmodulo) REFERENCES public.modulos (idmodulo)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_moduloxseccionxsubseccion_secciones */
ALTER TABLE public.moduloxseccionxsubseccion ADD CONSTRAINT fk_moduloxseccionxsubseccion_secciones
	FOREIGN KEY (idseccion) REFERENCES public.secciones (idseccion)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_moduloxseccionxsubseccion_subsecciones */
ALTER TABLE public.moduloxseccionxsubseccion ADD CONSTRAINT fk_moduloxseccionxsubseccion_subsecciones
	FOREIGN KEY (idsubseccion) REFERENCES public.subsecciones (idsubseccion)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_pais */
ALTER TABLE public.moneda ADD CONSTRAINT fk_pais
	FOREIGN KEY (idpais) REFERENCES public.pais (idpais)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_pasarelapago_usuario */
ALTER TABLE public.pasarelapago ADD CONSTRAINT fk_pasarelapago_usuario
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_perfil_funcionalidad_perfil */
ALTER TABLE public.perfil_funcionalidad ADD CONSTRAINT fk_perfil_funcionalidad_perfil
	FOREIGN KEY (idperfil) REFERENCES public.perfil (idperfil)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_perfil_has_usuario_perfil */
ALTER TABLE public.perfil_has_usuario ADD CONSTRAINT fk_perfil_has_usuario_perfil
	FOREIGN KEY (idperfil) REFERENCES public.perfil (idperfil)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_perfil_has_usuario_usuario */
ALTER TABLE public.perfil_has_usuario ADD CONSTRAINT fk_perfil_has_usuario_usuario
	FOREIGN KEY (idusuario) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_permisos_modulos */
ALTER TABLE public.permisos ADD CONSTRAINT fk_permisos_modulos
	FOREIGN KEY (idmodulo) REFERENCES public.modulos (idmodulo)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_permisos_perfil */
ALTER TABLE public.permisos ADD CONSTRAINT fk_permisos_perfil
	FOREIGN KEY (idperfil) REFERENCES public.perfil (idperfil)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_permisos_secciones */
ALTER TABLE public.permisos ADD CONSTRAINT fk_permisos_secciones
	FOREIGN KEY (idseccion) REFERENCES public.secciones (idseccion)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_permisos_subsecciones */
ALTER TABLE public.permisos ADD CONSTRAINT fk_permisos_subsecciones
	FOREIGN KEY (idsubsecccion) REFERENCES public.subsecciones (idsubseccion)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_permisos_usuario */
ALTER TABLE public.permisos ADD CONSTRAINT fk_permisos_usuario
	FOREIGN KEY (idusuario) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_persona_ciudad */
ALTER TABLE public.persona ADD CONSTRAINT fk_persona_ciudad
	FOREIGN KEY (idciudad) REFERENCES public.ciudad (idciudad)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_persona_usuario_created */
ALTER TABLE public.persona ADD CONSTRAINT fk_persona_usuario_created
	FOREIGN KEY (idusuario_created) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_persona_usuario_updated */
ALTER TABLE public.persona ADD CONSTRAINT fk_persona_usuario_updated
	FOREIGN KEY (idusuario_updated) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_promociones_promocion */
ALTER TABLE public.promociones ADD CONSTRAINT fk_promociones_promocion
	FOREIGN KEY (idpromocion) REFERENCES public.promocion (idpromocion)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_promociones_recaudopromo */
ALTER TABLE public.recaudopromo ADD CONSTRAINT fk_promociones_recaudopromo
	FOREIGN KEY (idpromociones) REFERENCES public.promociones (idpromociones)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_recaudo_benefactor */
ALTER TABLE public.recaudo ADD CONSTRAINT fk_recaudo_benefactor
	FOREIGN KEY (idbenefactor) REFERENCES public.benefactor (idbenefactor)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_recaudo_beneficiario */
ALTER TABLE public.recaudo ADD CONSTRAINT fk_recaudo_beneficiario
	FOREIGN KEY (idbeneficiario) REFERENCES public.beneficiario (idbeneficiario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_recaudo_pasarelapago */
ALTER TABLE public.recaudo ADD CONSTRAINT fk_recaudo_pasarelapago
	FOREIGN KEY (idpasarela) REFERENCES public.pasarelapago (idpasarela)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_promociones_recaudo */
ALTER TABLE public.recaudopromo ADD CONSTRAINT fk_promociones_recaudo
	FOREIGN KEY (idrecaudo) REFERENCES public.recaudo (idrecaudo)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_repoauditoria_usuario */
ALTER TABLE public.repoauditoria ADD CONSTRAINT fk_repoauditoria_usuario
	FOREIGN KEY (idusuario) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_reportes_usuario */
ALTER TABLE public.reportes ADD CONSTRAINT fk_reportes_usuario
	FOREIGN KEY (idusuario) REFERENCES public.usuario (idusuario)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_transacciones_recaudo */
ALTER TABLE public.transacciones ADD CONSTRAINT fk_transacciones_recaudo
	FOREIGN KEY (idrecaudo) REFERENCES public.recaudo (idrecaudo)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_transmensajetexto_transacciones */
ALTER TABLE public.transmensajetexto ADD CONSTRAINT fk_transmensajetexto_transacciones
	FOREIGN KEY (transaccionid) REFERENCES public.transacciones (idtransaccion)
	ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_usuario_persona */
ALTER TABLE public.usuario ADD CONSTRAINT fk_usuario_persona
	FOREIGN KEY (idpersona) REFERENCES public.persona (idpersona)
	ON UPDATE NO ACTION ON DELETE NO ACTION;